using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Unity.Jobs;
using Unity.Collections;




public class GPUaFX : MonoBehaviour
{
    /*AtomGroup\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|//////////////////////////////*/
    [SerializeField]
    private int _objectsCountAtomGroup = 20;
    [SerializeField]
    private ComputeShader _shaderAtomGroup;

    [SerializeField]
    private GameObject _prefabWater;

    private ComputeBuffer _bufferSharedHeap;
    private ComputeBuffer _bufferPositionAtoms;
    private ComputeBuffer _bufferRegulatorTick;
    private ComputeBuffer _bufferStartCounter;

    private int _kernelIndexAtomGroup;
    private uint _threadGroupSizeAtomGroup;

    [SerializeField] private Vector4[] _resultPositionsWater;
    [SerializeField] private Vector4[] _resultPositionsWaterOnStart;
     private int[] _resultOrientationOnStart;

    private NativeArray<Vector3> _inputFX;
    private NativeArray<Vector3> _outputFX;
    private Vector3 tFX;
    private int[] _MendeleevTable;

    private Transform[] _objectsWater;
    [SerializeField]private int threadGroupsOne;
    int counterFU = 1000;
    int counterD1 = 0;
    [SerializeField]int counterD2 = 100;

    private bool blStart = true;

private void Awake()
{
        

    _kernelIndexAtomGroup = _shaderAtomGroup.FindKernel("AtomGroup");

    _shaderAtomGroup.GetKernelThreadGroupSizes(_kernelIndexAtomGroup, out _threadGroupSizeAtomGroup, out _, out _);

    _objectsCountAtomGroup *= (int)_threadGroupSizeAtomGroup;

    _inputFX = new NativeArray<Vector3>(_objectsCountAtomGroup, Allocator.TempJob);
    _outputFX = new NativeArray<Vector3>(_objectsCountAtomGroup, Allocator.TempJob);

    
            
    _bufferSharedHeap = new ComputeBuffer(_objectsCountAtomGroup, sizeof(float) * 16);
    _bufferPositionAtoms = new ComputeBuffer(_objectsCountAtomGroup, sizeof(float) * 4);
    _bufferRegulatorTick = new ComputeBuffer(1, sizeof(float));
    _bufferStartCounter = new ComputeBuffer(_objectsCountAtomGroup, sizeof(float));


    
    _resultPositionsWater = new Vector4[_objectsCountAtomGroup];
    _resultPositionsWaterOnStart = new Vector4[_objectsCountAtomGroup];
    _resultOrientationOnStart= new int[1];
    _MendeleevTable = new int[_objectsCountAtomGroup];
    _objectsWater = new Transform[_objectsCountAtomGroup]; 
    for (int i = 0; i < _objectsCountAtomGroup; i++)
    {
        _objectsWater[i] = Instantiate(_prefabWater, transform).transform;
        _objectsWater[i].gameObject.SetActive(true);
    }
    _shaderAtomGroup.SetBuffer(_kernelIndexAtomGroup, "Atomsroommates", _bufferSharedHeap);
    _shaderAtomGroup.SetBuffer(_kernelIndexAtomGroup, "PositionAtoms", _bufferPositionAtoms);
    _shaderAtomGroup.SetBuffer(_kernelIndexAtomGroup, "RegulatorTick", _bufferRegulatorTick);
    _shaderAtomGroup.SetBuffer(_kernelIndexAtomGroup, "StCountr", _bufferStartCounter);

    

    threadGroupsOne = (int) (_objectsCountAtomGroup / _threadGroupSizeAtomGroup);
        
    _resultPositionsWaterOnStart[0] = new Vector4(1,0,0,0);
    _resultPositionsWaterOnStart[1] = new Vector4(2,0,0,0);
    _bufferPositionAtoms.SetData(_resultPositionsWaterOnStart);

    _resultOrientationOnStart[0] = 0;
    _bufferRegulatorTick.SetData(_resultOrientationOnStart);

    _shaderAtomGroup.SetInt("quantity", _objectsCountAtomGroup);

    
    

    /*stHoneycombsArray[0].uintHoneycombs[0] = 1;
    stHoneycombsArray[0].uintHoneycombs[1] = 2;
    stHoneycombsArray[0].uintHoneycombs[2] = 0;
    stHoneycombsArray[0].uintHoneycombs[3] = 0;
    stHoneycombsArray[0].uintHoneycombs[4] = 0;
    stHoneycombsArray[0].uintHoneycombs[5] = 0;

    stHoneycombsArray[1].uintHoneycombs[0] = 0;
    stHoneycombsArray[1].uintHoneycombs[1] = 2;
    stHoneycombsArray[1].uintHoneycombs[2] = 0;
    stHoneycombsArray[1].uintHoneycombs[3] = 0;
    stHoneycombsArray[1].uintHoneycombs[4] = 0;
    stHoneycombsArray[1].uintHoneycombs[5] = 0;

    stHoneycombsArray[2].uintHoneycombs[0] = 0;
    stHoneycombsArray[2].uintHoneycombs[1] = 1;
    stHoneycombsArray[2].uintHoneycombs[2] = 0;
    stHoneycombsArray[2].uintHoneycombs[3] = 0;
    stHoneycombsArray[2].uintHoneycombs[4] = 0;
    stHoneycombsArray[2].uintHoneycombs[5] = 0;*/

    //_bufferSharedHeap.SetData(stHoneycombsArray);
    //counterD1 = counterD2;
}

private void Update() 
{
    /*if(blStart)
    {
        
    blStart = false;
    };*/
    /*var joboncpu = new JobOnCpu()
    {
        InputFX = _inputFX,
        OutputFX = _outputFX
    };

    var moveAtom = joboncpu.Schedule(_objectsCountAtomGroup, 8);
    moveAtom.Complete();*/
    while (counterD1 <= counterD2)
    {
      _shaderAtomGroup.Dispatch(_kernelIndexAtomGroup, threadGroupsOne, 1, 1);
      counterD1++;  
    }counterD1 = 0;
    
    /*if (counterFU >= 100){
      _bufferMendeleevTable.GetData(_MendeleevTable);
      counterFU = 0;
    }counterFU++;*/
    
    _bufferPositionAtoms.GetData(_resultPositionsWater);
    
    

    for (int i = 0; i < _objectsWater.Length; i++){
        if ( /*_MendeleevTable[i] == 1*/ true)//Water
        {
            /*_inputFX[1] = new Vector3(1,1,1);
           _objectsWater[i].localPosition = _outputFX[i];*/
            _objectsWater[i].localPosition = _resultPositionsWater[i];
        }
    }
}

private void OnDestroy()
{
    _bufferPositionAtoms.Dispose();
    _bufferRegulatorTick.Dispose();
    _bufferSharedHeap.Dispose();
    _bufferStartCounter.Dispose();
    /*_inputFX.Dispose();
    _outputFX.Dispose();*/
}
}
