struct stHoneycombs{
    uint uintHoneycombs[14];
    float divider;
    float counter;
};

RWStructuredBuffer<stHoneycombs> Atomsroommates;
RWStructuredBuffer<int> RegulatorTick;
RWStructuredBuffer<float4> PositionAtoms;
RWStructuredBuffer<int> StCountr;
//float arrtrifloats[1];
uint quantity;

#pragma kernel AtomGroup
[numthreads(1,1,1)]
void AtomGroup (uint3 id : SV_DispatchThreadID)
{
    float4 ChanPositionAtoms = 0;
    if(RegulatorTick[0] == 1) //тик
    {
        if(Atomsroommates[id.x].counter >= Atomsroommates[id.x].divider)
        {
            bool blwhOne = true;
            while(blwhOne){
                bool blwhTwo = false;
                bool blwhTwoA = false;
                bool blwhTwoB = false;
                bool blwhTwoC = false;
                bool blwhTwoD = false;
                bool blwhTwoE = false;
                int blintOne = 0;
                if(blwhTwo == true){//x
                    
                }else{
                    blintOne ++;
                }
                if(blwhTwoA == true){//-x
                    
                }else{
                    blintOne ++;
                }
                if(blwhTwoB == true){//y
                    
                }else{
                    blintOne ++;
                }
                if(blwhTwoC == true){//-y
                    
                }else{
                    blintOne ++;
                }
                if(blwhTwoD == true){//z
                    
                }else{
                    blintOne ++;
                }
                if(blwhTwoE == true){//-z
                    
                }else{
                    blintOne ++;
                }
              /*Stop*/  if(blintOne >= 5){blwhOne = false;}
            }
        ChanPositionAtoms += float4(0.1, RegulatorTick[0], 0.1, 0.1) * 1;
        Atomsroommates[id.x].counter = 0;
        PositionAtoms[id.x] += ChanPositionAtoms;
        }Atomsroommates[id.x].counter++;
    }
    else if(RegulatorTick[0] == 0) //Старт тик (1.1547 0.57735)
    {

        if(StCountr[id.x] < quantity)
        {
            float3 DirOfView;
            DirOfView = normalize(PositionAtoms[StCountr[id.x]].xyz - PositionAtoms[id.x].xyz);
            float NewObg;
            NewObg = distance(PositionAtoms[StCountr[id.x]].xyz, PositionAtoms[id.x].xyz);
            if(DirOfView.x > -0.57735)
            {
                if(DirOfView.x < 0.57735)
                {
                    if(DirOfView.y > -0.57735)
                    {
                        if(DirOfView.y < 0.57735)
                        {
                            if(DirOfView.z > -0.57735)
                            {//z
                                if(distance(PositionAtoms[Atomsroommates[id.x].uintHoneycombs[4]].xyz, PositionAtoms[id.x].xyz) > NewObg){
                                Atomsroommates[id.x].uintHoneycombs[4] = StCountr[id.x];}
                            }else{//-z
                                if(distance(PositionAtoms[Atomsroommates[id.x].uintHoneycombs[5]].xyz, PositionAtoms[id.x].xyz) > NewObg){
                                Atomsroommates[id.x].uintHoneycombs[5] = StCountr[id.x];}
                            }
                        }else{//y
                            if(distance(PositionAtoms[Atomsroommates[id.x].uintHoneycombs[2]].xyz, PositionAtoms[id.x].xyz) > NewObg){
                            Atomsroommates[id.x].uintHoneycombs[2] = StCountr[id.x];}
                        }
                    }else{//-y
                        if(distance(PositionAtoms[Atomsroommates[id.x].uintHoneycombs[3]].xyz, PositionAtoms[id.x].xyz) > NewObg){
                        Atomsroommates[id.x].uintHoneycombs[3] = StCountr[id.x];}
                    }
                }else{//x
                    if(distance(PositionAtoms[Atomsroommates[id.x].uintHoneycombs[0]].xyz, PositionAtoms[id.x].xyz) > NewObg){
                    Atomsroommates[id.x].uintHoneycombs[0] = StCountr[id.x];}
                }
            }else{//-x
                if(distance(PositionAtoms[Atomsroommates[id.x].uintHoneycombs[1]].xyz, PositionAtoms[id.x].xyz) > NewObg){
                Atomsroommates[id.x].uintHoneycombs[1] = StCountr[id.x];}
            }
            Atomsroommates[id.x].uintHoneycombs[0] = 0;//x
        Atomsroommates[id.x].uintHoneycombs[1] = 1;//-x
        Atomsroommates[id.x].uintHoneycombs[2] = 2;//y
        Atomsroommates[id.x].uintHoneycombs[3] = 0;//-y
        Atomsroommates[id.x].uintHoneycombs[4] = 0;//z
        Atomsroommates[id.x].uintHoneycombs[5] = 0;//-z
            StCountr[id.x]++;
        }else{
            Atomsroommates[id.x].divider = 10000;
            Atomsroommates[id.x].counter = 0;
            RegulatorTick[0] = 1;
        }
        /*Atomsroommates[id.x].uintHoneycombs[0] = 0;//x
        Atomsroommates[id.x].uintHoneycombs[1] = 1;//-x
        Atomsroommates[id.x].uintHoneycombs[2] = 2;//y
        Atomsroommates[id.x].uintHoneycombs[3] = 0;//-y
        Atomsroommates[id.x].uintHoneycombs[4] = 0;//z
        Atomsroommates[id.x].uintHoneycombs[5] = 0;//-z*/
        
        
    }
    //         1047999
    /*Atomsroommates[id.x].uintHoneycombs[1] += 1;
    MendeleevTable[id.x] = 1;
    
    PositionAtoms[id.x] = float4(Atomsroommates[id.x].uintHoneycombs[1], id.x , id.x, id.x); */
    //PositionAtoms[id.x] += float4(0, 0, id.x * 0.0001, id.x * 0.0001);
    /*if (false){
    PositionAtoms[id.x] = float4(Atomsroommates[id.x].uintHoneycombs[1], id.x , id.x, id.x);
    }else{
    PositionAtoms[id.x] += float4(Atomsroommates[id.x].uintHoneycombs[1], id.x , id.x, id.x);
    }*/
}
